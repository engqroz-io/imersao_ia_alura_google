# -*- coding: utf-8 -*-
"""gemini_configuring_chatbox.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/engqroz-io/ab4d7bca15aa4b154ae14ebe01b46bbd/gemini_configuring_chatbox.ipynb

# Desenvolvimento de chatbot

## Instalação da biblioteca para utilização do Gemini
"""

!pip install -q -U google-generativeai #instala a biblioteca do google para utilização da API Key / Gemini

"""## Configuração da API Key"""

import google.generativeai as genai

GOOGLE_API_KEY=""
genai.configure(api_key=GOOGLE_API_KEY)

for m in genai.list_models():
  if 'generateContent' in m.supported_generation_methods:
    print(m.name) # lista as versões de utilização do Gemini

"""## Versões do **Gemini**
* 1.0 PRO - Versão estável
* 1.0 PRO 001 - Versão experimental
* 1.5 PRO - Maior complexidade de raciocínio e sem safety_settings devido a versão de avaliação
* Pro Vision 1.0 -

`.latest() --> Aponta para a última versão estável.`

## Configurando o modelo

### Variáveis de configuração do modelo Gemini.
"""

generation_config = {
    "candidate_count": 1,
    # Quanto maior a "temperature" mas criativo fica a resposta.
    # Parâmetro é entre 0 e 1
    "temperature": 0.5
}

"""> Quanto maior o parâmetro "temperature" mais criativo fica a resposta.:



"""

safety_settings = {
    "HARASSMENT": "BLOCK_NONE",
    "HATE": "BLOCK_NONE",
    "SEXUAL": "BLOCK_NONE",
    "DANGEROUS": "BLOCK_NONE"
}

"""### Inicializando o modelo"""

model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

response = model.genenate_contet("Aprendizado sobre AI. Me dê sugestões.")
print(response.text)

chat = model.start_chat(history=[])
prompt = input("Diga ao Gemini...")

while prompt != "fim":
  response = chat.send_message(prompt)
  print("Resposta: " + response.text() + "\n")
  prompt = input("Continuar? Se não digite 'fim'.")